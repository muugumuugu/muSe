class Point{constructor(t,s,i,h){this.x=t,this.y=s,this.data=i,this.index=h}show(t){strokeWeight(1),stroke(255,200),t&&(stroke("red"),strokeWeight(2)),point(this.x,this.y)}distanceFrom(t){var s=t.x-this.x,t=t.y-this.y;return Math.sqrt(s*s+t*t)}}class Rectangle{constructor(t,s,i,h){this.x=t,this.y=s,this.w=i,this.h=h,this.left=t-i,this.right=t+i,this.top=s-h,this.bottom=s+h}contains(t){return this.left<=t.x&&t.x<=this.right&&this.top<=t.y&&t.y<=this.bottom}intersects(t){return!(this.right<t.left||t.right<this.left||this.bottom<t.top||t.bottom<this.top)}show(t){noFill(),rectMode(CENTER),strokeWeight(.3),stroke(255),t&&(stroke("blue"),strokeWeight(2)),rect(this.x,this.y,2*this.w,2*this.h)}xDistanceFrom(t){return this.left<=t.x&&t.x<=this.right?0:Math.min(Math.abs(t.x-this.left),Math.abs(t.x-this.right))}yDistanceFrom(t){return this.top<=t.y&&t.y<=this.bottom?0:Math.min(Math.abs(t.y-this.top),Math.abs(t.y-this.bottom))}distanceFrom(t){var s=this.xDistanceFrom(t),t=this.yDistanceFrom(t);return Math.sqrt(s*s+t*t)}}class Circle{constructor(t,s,i){this.x=t,this.y=s,this.r=i,this.rSquared=this.r*this.r}contains(t){return Math.pow(t.x-this.x,2)+Math.pow(t.y-this.y,2)<=this.rSquared}intersects(t){var s=Math.abs(t.x-this.x),i=Math.abs(t.y-this.y),h=this.r,e=t.w/2,r=t.h/2,t=Math.pow(s-e,2)+Math.pow(i-r,2);return!(h+e<s||h+r<i)&&(s<=e||i<=r||t<=this.rSquared)}}class QuadTree{constructor(t,s){this.boundary=t,this.capacity=s,this.points=[],this.divided=!1}get children(){return this.divided?[this.ne,this.nw,this.se,this.sw]:[]}subdivide(){var t=this.boundary.x,s=this.boundary.y,i=this.boundary.w,h=this.boundary.h,e=new Rectangle(t+i/2,s-h/2,i/2,h/2);this.ne=new QuadTree(e,this.capacity);e=new Rectangle(t-i/2,s-h/2,i/2,h/2);this.nw=new QuadTree(e,this.capacity);e=new Rectangle(t+i/2,s+h/2,i/2,h/2);this.se=new QuadTree(e,this.capacity);h=new Rectangle(t-i/2,s+h/2,i/2,h/2);this.sw=new QuadTree(h,this.capacity),this.divided=!0}insert(t){return!!this.boundary.contains(t)&&(this.points.length<this.capacity?(this.points.push(t),!0):(this.divided||this.subdivide(),!!this.ne.insert(t)||(!!this.nw.insert(t)||(!!this.se.insert(t)||(!!this.sw.insert(t)||void 0)))))}query(t,s){if(s=s||[],this.boundary.intersects(t)){for(var i of this.points)t.contains(i)&&s.push(i);return this.divided&&(this.nw.query(t,s),this.ne.query(t,s),this.sw.query(t,s),this.se.query(t,s)),s}}show(){this.boundary.show();for(var t of this.points)t.show();this.divided&&(this.ne.show(),this.nw.show(),this.se.show(),this.sw.show())}forEach(t){this.points.forEach(t),this.divided&&(this.ne.forEach(t),this.nw.forEach(t),this.se.forEach(t),this.sw.forEach(t))}closest(t,s=1,i=1/0){if(void 0===t)throw TypeError("Method 'closest' needs a point");return this.kNearest(t,s,i,0,0).found}kNearest(i,h,e,r,o){let n=[];return this.children.sort((t,s)=>t.boundary.distanceFrom(i)-s.boundary.distanceFrom(i)).forEach(t=>{var s=t.boundary.distanceFrom(i);e<s||(o<h||s<r)&&(t=(s=t.kNearest(i,h,e,r,o)).found,n=n.concat(t),o+=t.length,r=s.furthestDistance)}),this.points.sort((t,s)=>t.distanceFrom(i)-s.distanceFrom(i)).forEach(t=>{var s=t.distanceFrom(i);e<s||(o<h||s<r)&&(n.push(t),r=Math.max(s,r),o++)}),{found:n.sort((t,s)=>t.distanceFrom(i)-s.distanceFrom(i)).slice(0,h),furthestDistance:r}}}